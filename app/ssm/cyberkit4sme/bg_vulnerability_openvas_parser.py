##///////////////////////////////////////////////////////////////////////
##
## (c) University of Southampton IT Innovation Centre, 2021
##
## Copyright in this software belongs to University of Southampton
## IT Innovation Centre of Gamma House, Enterprise Road,
## Chilworth Science Park, Southampton, SO16 7NS, UK.
##
## This software may not be used, sold, licensed, transferred, copied
## or reproduced in whole or in part in any manner or form or in or
## on any media by any person other than in accordance with the terms
## of the Licence Agreement supplied with the software, or otherwise
## without the prior written consent of the copyright owners.
##
## This software is distributed WITHOUT ANY WARRANTY, without even the
## implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
## PURPOSE, except where stated in the Licence Agreement supplied with
## the software.
##
##      Created By :            Samuel Senior
##      Created Date :          2022-05-25
##      Created for Project :   Cyberkit4SME
##
##///////////////////////////////////////////////////////////////////////

from fastapi.logger import logger

import xml.etree.ElementTree as ET


class OpenVASParser:
    def __init__(self):
        pass
    
    def _getHostAndPort(self, report):
        # Get host and port info
        if len([ host.text for host in report.findall("host") ]) == 0:
            logger.info(f"Report ID {report.attrib['id']}: No host found")
        host = [ host.text.rstrip() for host in report.findall("host") ]
        if len(host) == 1:
            host = host[0]
        if len([ port.text for port in report.findall("port") ]) == 0:
            logger.info(f"Report ID {report.attrib['id']}: No port found")
        port = [ port.text.rstrip() for port in report.findall("port") ]
        if len(port) == 1:
            port = port[0]
        
        return host, port
    
    def _getRefs(self, report):
        
        if len([ ref.attrib for ref in report.findall("./nvt/refs/ref") ]) != 0:
            return [ ref.attrib for ref in report.findall("./nvt/refs/ref") ]
        elif len([ xref.text for xref in report.findall("./nvt/xref") ]) != 0:
            xref = [ xref.text for xref in report.findall("./nvt/xref") ]
            if "NOXREF" in xref:
                xref.remove("NOXREF")
            xref_formatted = []
            for x in xref:
                tmp = x.split(", ")
                for t in tmp:
                    xref_formatted.append({"type":t.split(":", 1)[0], "id":t.split(":", 1)[1]})
            return xref_formatted
        else:
            return []
        
    def _getCVEs(self, report):
        # Get CVEs
        # Places CVEs can be found in, depending on the OpenVAS format:
        #     - ./nvt/refs/ref where ref contains entries of dict {"type":..., "id":...} 
        #     - ./nvt/cve
        cves = []
        refs = [ ref.attrib for ref in report.findall("./nvt/refs/ref") ]
        for i, ref in enumerate(refs):
            if ref["type"] == "cve":
                cves.append(ref["id"])
        if len(cves) == 0:
             cves = [ cve.text for cve in report.findall("./nvt/cve") ]
             if "NOCVE" in cves:
                 cves.remove("NOCVE")
        return cves
        
    def _getURLs(self, report):
        # Get URLs
        # Places URLs can be found in, depending on the OpenVAS format:
        #     - ./nvt/refs/ref where ref contains entries of dict {"type":..., "id":...} 
        #     - ./nvt/xref where xref is a string that can contain "URL:..."
        urls = []
        refs = self._getRefs(report)#[ ref.attrib for ref in report.findall("./nvt/refs/ref") ]
        for i, ref in enumerate(refs):
            if ref["type"] == "url" or ref["type"] == "URL":
                urls.append(ref["id"])
        return urls
    
    def _checkURLsForCVEs(self, report):
        urls = self._getURLs(report)
        cve = []
        for url in urls:
            if url[0:49] == "https://web.nvd.nist.gov/view/vuln/detail?vulnId=":
                if url[49:] not in cve:
                    cve.append(url[49:])
        return cve
    
    def _getTags(self, report):
        if len([ tag.text for tag in report.findall("./nvt/tags") ]) != 0:
            tags = [ tag.text for tag in report.findall("./nvt/tags") ]
            tags_split = {}
            for tag in tags:
                t1 = tag.split("|")
                for t in t1:
                    if t.split("=", 1)[0] not in tags_split:
                        tags_split[t.split("=", 1)[0]] = [t.split("=", 1)[1]]
                    else:
                        tags_split[t.split("=", 1)[0]].append(t.split("=", 1)[1])
            return tags_split
        else:
            return []
    
    def _getCVSS(self, report):
        
        if len([ sev.text for sev in report.findall("./nvt/severities/severity/value") ]) != 0:
            cvss_version = [ nvt.attrib["type"] for nvt in report.findall("./nvt/severities/severity") ][0]
            cvss_vector = [ sev.text for sev in report.findall("./nvt/severities/severity/value") ]
            return cvss_version, cvss_vector
        elif "cvss_base_vector" in self._getTags(report):
            cvss_vector = []
            for cvss_vector in self._getTags(report)["cvss_base_vector"]:
                if "CVSS:3.1" in cvss_vector:
                    cvss_version = "cvss_base_v3"
                elif "CVSS:3.0" in cvss_vector:
                    cvss_version = "cvss_base_v3"
                else:
                    logger.info(f"Report ID {report.attrib['id']}: CVSS base vector version not given, assuing CVSS base vector version 2")
                    cvss_version = "cvss_base_v2"
            return cvss_version, [cvss_vector]
        else:
            return []

    def parse(self, fileName):
        
        tree = ET.parse(fileName)
        root = tree.getroot()
        
        reports = []

        for report in root.iter("result"):
            
            # Get host and port info
            host, port = self._getHostAndPort(report)
            
            if len(host) != 0 and len(port) != 0:
                reports.append({})
                reports[-1]["id"] = report.attrib["id"]
                
                reports[-1]["host"], reports[-1]["port"] = host, port
                
                # Get refs if any present
                if len(self._getRefs(report)) != 0:
                    reports[-1]["refs"] = self._getRefs(report)
                
                # Get CVEs if any present
                if len(self._getCVEs(report)) != 0:
                    reports[-1]["cve"] = self._getCVEs(report)
                    
                # Get URLs if any present
                if len(self._getURLs(report)) != 0:
                    reports[-1]["url"] = self._getURLs(report)
                    
                # Check URL for CVE entry, and add any unique ones to the CVEs
                if len(self._checkURLsForCVEs(report)) != 0:
                    if "cve" not in reports[-1]:
                        reports[-1]["cve"] = []
                    for cve in self._checkURLsForCVEs(report):
                        if cve not in reports[-1]["cve"]:
                            reports[-1]["cve"].append(cve)
                            logger.info(f"Report ID {report.attrib['id']}: Added CVE {cve} from URL to CVE list")
                   
                # Get tags if any present
                if len(self._getTags(report)) != 0:
                    reports[-1]["tags"] = self._getTags(report)
                
                # Get CVSS
                if len(self._getCVSS(report)) != 0:
                    cvss = self._getCVSS(report)
                    reports[-1][cvss[0]] = cvss[1]
                
        return reports
