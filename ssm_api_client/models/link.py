# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class Link(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'from_asset': 'str',
        'from_asset_label': 'str',
        'from_role': 'str',
        'from_role_label': 'str',
        'to_asset': 'str',
        'to_asset_label': 'str',
        'to_role': 'str',
        'to_role_label': 'str',
        'type': 'str',
        'type_label': 'str'
    }

    attribute_map = {
        'from_asset': 'fromAsset',
        'from_asset_label': 'fromAssetLabel',
        'from_role': 'fromRole',
        'from_role_label': 'fromRoleLabel',
        'to_asset': 'toAsset',
        'to_asset_label': 'toAssetLabel',
        'to_role': 'toRole',
        'to_role_label': 'toRoleLabel',
        'type': 'type',
        'type_label': 'typeLabel'
    }

    def __init__(self, from_asset=None, from_asset_label=None, from_role=None, from_role_label=None, to_asset=None, to_asset_label=None, to_role=None, to_role_label=None, type=None, type_label=None, local_vars_configuration=None):  # noqa: E501
        """Link - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._from_asset = None
        self._from_asset_label = None
        self._from_role = None
        self._from_role_label = None
        self._to_asset = None
        self._to_asset_label = None
        self._to_role = None
        self._to_role_label = None
        self._type = None
        self._type_label = None
        self.discriminator = None

        if from_asset is not None:
            self.from_asset = from_asset
        if from_asset_label is not None:
            self.from_asset_label = from_asset_label
        if from_role is not None:
            self.from_role = from_role
        if from_role_label is not None:
            self.from_role_label = from_role_label
        if to_asset is not None:
            self.to_asset = to_asset
        if to_asset_label is not None:
            self.to_asset_label = to_asset_label
        if to_role is not None:
            self.to_role = to_role
        if to_role_label is not None:
            self.to_role_label = to_role_label
        if type is not None:
            self.type = type
        if type_label is not None:
            self.type_label = type_label

    @property
    def from_asset(self):
        """Gets the from_asset of this Link.  # noqa: E501


        :return: The from_asset of this Link.  # noqa: E501
        :rtype: str
        """
        return self._from_asset

    @from_asset.setter
    def from_asset(self, from_asset):
        """Sets the from_asset of this Link.


        :param from_asset: The from_asset of this Link.  # noqa: E501
        :type: str
        """

        self._from_asset = from_asset

    @property
    def from_asset_label(self):
        """Gets the from_asset_label of this Link.  # noqa: E501


        :return: The from_asset_label of this Link.  # noqa: E501
        :rtype: str
        """
        return self._from_asset_label

    @from_asset_label.setter
    def from_asset_label(self, from_asset_label):
        """Sets the from_asset_label of this Link.


        :param from_asset_label: The from_asset_label of this Link.  # noqa: E501
        :type: str
        """

        self._from_asset_label = from_asset_label

    @property
    def from_role(self):
        """Gets the from_role of this Link.  # noqa: E501


        :return: The from_role of this Link.  # noqa: E501
        :rtype: str
        """
        return self._from_role

    @from_role.setter
    def from_role(self, from_role):
        """Sets the from_role of this Link.


        :param from_role: The from_role of this Link.  # noqa: E501
        :type: str
        """

        self._from_role = from_role

    @property
    def from_role_label(self):
        """Gets the from_role_label of this Link.  # noqa: E501


        :return: The from_role_label of this Link.  # noqa: E501
        :rtype: str
        """
        return self._from_role_label

    @from_role_label.setter
    def from_role_label(self, from_role_label):
        """Sets the from_role_label of this Link.


        :param from_role_label: The from_role_label of this Link.  # noqa: E501
        :type: str
        """

        self._from_role_label = from_role_label

    @property
    def to_asset(self):
        """Gets the to_asset of this Link.  # noqa: E501


        :return: The to_asset of this Link.  # noqa: E501
        :rtype: str
        """
        return self._to_asset

    @to_asset.setter
    def to_asset(self, to_asset):
        """Sets the to_asset of this Link.


        :param to_asset: The to_asset of this Link.  # noqa: E501
        :type: str
        """

        self._to_asset = to_asset

    @property
    def to_asset_label(self):
        """Gets the to_asset_label of this Link.  # noqa: E501


        :return: The to_asset_label of this Link.  # noqa: E501
        :rtype: str
        """
        return self._to_asset_label

    @to_asset_label.setter
    def to_asset_label(self, to_asset_label):
        """Sets the to_asset_label of this Link.


        :param to_asset_label: The to_asset_label of this Link.  # noqa: E501
        :type: str
        """

        self._to_asset_label = to_asset_label

    @property
    def to_role(self):
        """Gets the to_role of this Link.  # noqa: E501


        :return: The to_role of this Link.  # noqa: E501
        :rtype: str
        """
        return self._to_role

    @to_role.setter
    def to_role(self, to_role):
        """Sets the to_role of this Link.


        :param to_role: The to_role of this Link.  # noqa: E501
        :type: str
        """

        self._to_role = to_role

    @property
    def to_role_label(self):
        """Gets the to_role_label of this Link.  # noqa: E501


        :return: The to_role_label of this Link.  # noqa: E501
        :rtype: str
        """
        return self._to_role_label

    @to_role_label.setter
    def to_role_label(self, to_role_label):
        """Sets the to_role_label of this Link.


        :param to_role_label: The to_role_label of this Link.  # noqa: E501
        :type: str
        """

        self._to_role_label = to_role_label

    @property
    def type(self):
        """Gets the type of this Link.  # noqa: E501


        :return: The type of this Link.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Link.


        :param type: The type of this Link.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_label(self):
        """Gets the type_label of this Link.  # noqa: E501


        :return: The type_label of this Link.  # noqa: E501
        :rtype: str
        """
        return self._type_label

    @type_label.setter
    def type_label(self, type_label):
        """Sets the type_label of this Link.


        :param type_label: The type_label of this Link.  # noqa: E501
        :type: str
        """

        self._type_label = type_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Link):
            return True

        return self.to_dict() != other.to_dict()
