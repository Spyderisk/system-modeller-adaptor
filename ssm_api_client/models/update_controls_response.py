# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class UpdateControlsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'controls': 'list[str]',
        'proposed': 'bool',
        'work_in_progress': 'bool',
        'coverage_level': 'str'
    }

    attribute_map = {
        'controls': 'controls',
        'proposed': 'proposed',
        'work_in_progress': 'workInProgress',
        'coverage_level': 'coverageLevel'
    }

    def __init__(self, controls=None, proposed=None, work_in_progress=None, coverage_level=None, local_vars_configuration=None):  # noqa: E501
        """UpdateControlsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._controls = None
        self._proposed = None
        self._work_in_progress = None
        self._coverage_level = None
        self.discriminator = None

        if controls is not None:
            self.controls = controls
        if proposed is not None:
            self.proposed = proposed
        if work_in_progress is not None:
            self.work_in_progress = work_in_progress
        if coverage_level is not None:
            self.coverage_level = coverage_level

    @property
    def controls(self):
        """Gets the controls of this UpdateControlsResponse.  # noqa: E501


        :return: The controls of this UpdateControlsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._controls

    @controls.setter
    def controls(self, controls):
        """Sets the controls of this UpdateControlsResponse.


        :param controls: The controls of this UpdateControlsResponse.  # noqa: E501
        :type: list[str]
        """

        self._controls = controls

    @property
    def proposed(self):
        """Gets the proposed of this UpdateControlsResponse.  # noqa: E501


        :return: The proposed of this UpdateControlsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this UpdateControlsResponse.


        :param proposed: The proposed of this UpdateControlsResponse.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def work_in_progress(self):
        """Gets the work_in_progress of this UpdateControlsResponse.  # noqa: E501


        :return: The work_in_progress of this UpdateControlsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._work_in_progress

    @work_in_progress.setter
    def work_in_progress(self, work_in_progress):
        """Sets the work_in_progress of this UpdateControlsResponse.


        :param work_in_progress: The work_in_progress of this UpdateControlsResponse.  # noqa: E501
        :type: bool
        """

        self._work_in_progress = work_in_progress

    @property
    def coverage_level(self):
        """Gets the coverage_level of this UpdateControlsResponse.  # noqa: E501


        :return: The coverage_level of this UpdateControlsResponse.  # noqa: E501
        :rtype: str
        """
        return self._coverage_level

    @coverage_level.setter
    def coverage_level(self, coverage_level):
        """Sets the coverage_level of this UpdateControlsResponse.


        :param coverage_level: The coverage_level of this UpdateControlsResponse.  # noqa: E501
        :type: str
        """

        self._coverage_level = coverage_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateControlsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateControlsResponse):
            return True

        return self.to_dict() != other.to_dict()
