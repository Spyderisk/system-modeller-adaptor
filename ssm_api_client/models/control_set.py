# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class ControlSet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uri': 'str',
        'label': 'str',
        'description': 'str',
        'parents': 'list[str]',
        'control': 'str',
        'asset_uri': 'str',
        'asset_id': 'str',
        'proposed': 'bool',
        'assertable': 'bool',
        'work_in_progress': 'bool',
        'coverage_level': 'str',
        'coverage_asserted': 'bool',
        'id': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'label': 'label',
        'description': 'description',
        'parents': 'parents',
        'control': 'control',
        'asset_uri': 'assetUri',
        'asset_id': 'assetId',
        'proposed': 'proposed',
        'assertable': 'assertable',
        'work_in_progress': 'workInProgress',
        'coverage_level': 'coverageLevel',
        'coverage_asserted': 'coverageAsserted',
        'id': 'id'
    }

    def __init__(self, uri=None, label=None, description=None, parents=None, control=None, asset_uri=None, asset_id=None, proposed=None, assertable=None, work_in_progress=None, coverage_level=None, coverage_asserted=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ControlSet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uri = None
        self._label = None
        self._description = None
        self._parents = None
        self._control = None
        self._asset_uri = None
        self._asset_id = None
        self._proposed = None
        self._assertable = None
        self._work_in_progress = None
        self._coverage_level = None
        self._coverage_asserted = None
        self._id = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if parents is not None:
            self.parents = parents
        if control is not None:
            self.control = control
        if asset_uri is not None:
            self.asset_uri = asset_uri
        if asset_id is not None:
            self.asset_id = asset_id
        if proposed is not None:
            self.proposed = proposed
        if assertable is not None:
            self.assertable = assertable
        if work_in_progress is not None:
            self.work_in_progress = work_in_progress
        if coverage_level is not None:
            self.coverage_level = coverage_level
        if coverage_asserted is not None:
            self.coverage_asserted = coverage_asserted
        if id is not None:
            self.id = id

    @property
    def uri(self):
        """Gets the uri of this ControlSet.  # noqa: E501


        :return: The uri of this ControlSet.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ControlSet.


        :param uri: The uri of this ControlSet.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def label(self):
        """Gets the label of this ControlSet.  # noqa: E501


        :return: The label of this ControlSet.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ControlSet.


        :param label: The label of this ControlSet.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this ControlSet.  # noqa: E501


        :return: The description of this ControlSet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ControlSet.


        :param description: The description of this ControlSet.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def parents(self):
        """Gets the parents of this ControlSet.  # noqa: E501


        :return: The parents of this ControlSet.  # noqa: E501
        :rtype: list[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this ControlSet.


        :param parents: The parents of this ControlSet.  # noqa: E501
        :type: list[str]
        """

        self._parents = parents

    @property
    def control(self):
        """Gets the control of this ControlSet.  # noqa: E501


        :return: The control of this ControlSet.  # noqa: E501
        :rtype: str
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this ControlSet.


        :param control: The control of this ControlSet.  # noqa: E501
        :type: str
        """

        self._control = control

    @property
    def asset_uri(self):
        """Gets the asset_uri of this ControlSet.  # noqa: E501


        :return: The asset_uri of this ControlSet.  # noqa: E501
        :rtype: str
        """
        return self._asset_uri

    @asset_uri.setter
    def asset_uri(self, asset_uri):
        """Sets the asset_uri of this ControlSet.


        :param asset_uri: The asset_uri of this ControlSet.  # noqa: E501
        :type: str
        """

        self._asset_uri = asset_uri

    @property
    def asset_id(self):
        """Gets the asset_id of this ControlSet.  # noqa: E501


        :return: The asset_id of this ControlSet.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this ControlSet.


        :param asset_id: The asset_id of this ControlSet.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def proposed(self):
        """Gets the proposed of this ControlSet.  # noqa: E501


        :return: The proposed of this ControlSet.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this ControlSet.


        :param proposed: The proposed of this ControlSet.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def assertable(self):
        """Gets the assertable of this ControlSet.  # noqa: E501


        :return: The assertable of this ControlSet.  # noqa: E501
        :rtype: bool
        """
        return self._assertable

    @assertable.setter
    def assertable(self, assertable):
        """Sets the assertable of this ControlSet.


        :param assertable: The assertable of this ControlSet.  # noqa: E501
        :type: bool
        """

        self._assertable = assertable

    @property
    def work_in_progress(self):
        """Gets the work_in_progress of this ControlSet.  # noqa: E501


        :return: The work_in_progress of this ControlSet.  # noqa: E501
        :rtype: bool
        """
        return self._work_in_progress

    @work_in_progress.setter
    def work_in_progress(self, work_in_progress):
        """Sets the work_in_progress of this ControlSet.


        :param work_in_progress: The work_in_progress of this ControlSet.  # noqa: E501
        :type: bool
        """

        self._work_in_progress = work_in_progress

    @property
    def coverage_level(self):
        """Gets the coverage_level of this ControlSet.  # noqa: E501


        :return: The coverage_level of this ControlSet.  # noqa: E501
        :rtype: str
        """
        return self._coverage_level

    @coverage_level.setter
    def coverage_level(self, coverage_level):
        """Sets the coverage_level of this ControlSet.


        :param coverage_level: The coverage_level of this ControlSet.  # noqa: E501
        :type: str
        """

        self._coverage_level = coverage_level

    @property
    def coverage_asserted(self):
        """Gets the coverage_asserted of this ControlSet.  # noqa: E501


        :return: The coverage_asserted of this ControlSet.  # noqa: E501
        :rtype: bool
        """
        return self._coverage_asserted

    @coverage_asserted.setter
    def coverage_asserted(self, coverage_asserted):
        """Sets the coverage_asserted of this ControlSet.


        :param coverage_asserted: The coverage_asserted of this ControlSet.  # noqa: E501
        :type: bool
        """

        self._coverage_asserted = coverage_asserted

    @property
    def id(self):
        """Gets the id of this ControlSet.  # noqa: E501


        :return: The id of this ControlSet.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ControlSet.


        :param id: The id of this ControlSet.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControlSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ControlSet):
            return True

        return self.to_dict() != other.to_dict()
