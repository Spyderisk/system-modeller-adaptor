# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class ThreatDB(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uri': 'str',
        'type': 'str',
        'id': 'str',
        'label': 'str',
        'description': 'str',
        'parent': 'str',
        'threatens': 'str',
        'applies_to': 'str',
        'frequency': 'str',
        'entry_points': 'list[str]',
        'secondary_effect_conditions': 'list[str]',
        'misbehaviours': 'list[str]',
        'blocked_by_csg': 'list[str]',
        'mitigated_by_csg': 'list[str]',
        'triggered_by_csg': 'list[str]',
        'triggered': 'bool',
        'min_of': 'str',
        'max_of': 'str',
        'has_min': 'str',
        'has_max': 'str',
        'current_risk': 'bool',
        'future_risk': 'bool',
        'secondary_threat': 'bool',
        'normal_operation': 'bool',
        'risk': 'str',
        'direct_misbehaviours': 'list[str]',
        'indirect_misbehaviours': 'list[str]',
        'indirect_threats': 'list[str]',
        'caused_by': 'list[str]',
        'initial_cause': 'bool',
        'root_cause': 'bool',
        'likelihood': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'type': 'type',
        'id': 'id',
        'label': 'label',
        'description': 'description',
        'parent': 'parent',
        'threatens': 'threatens',
        'applies_to': 'appliesTo',
        'frequency': 'frequency',
        'entry_points': 'entryPoints',
        'secondary_effect_conditions': 'secondaryEffectConditions',
        'misbehaviours': 'misbehaviours',
        'blocked_by_csg': 'blockedByCSG',
        'mitigated_by_csg': 'mitigatedByCSG',
        'triggered_by_csg': 'triggeredByCSG',
        'triggered': 'triggered',
        'min_of': 'minOf',
        'max_of': 'maxOf',
        'has_min': 'hasMin',
        'has_max': 'hasMax',
        'current_risk': 'currentRisk',
        'future_risk': 'futureRisk',
        'secondary_threat': 'secondaryThreat',
        'normal_operation': 'normalOperation',
        'risk': 'risk',
        'direct_misbehaviours': 'directMisbehaviours',
        'indirect_misbehaviours': 'indirectMisbehaviours',
        'indirect_threats': 'indirectThreats',
        'caused_by': 'causedBy',
        'initial_cause': 'initialCause',
        'root_cause': 'rootCause',
        'likelihood': 'likelihood'
    }

    def __init__(self, uri=None, type=None, id=None, label=None, description=None, parent=None, threatens=None, applies_to=None, frequency=None, entry_points=None, secondary_effect_conditions=None, misbehaviours=None, blocked_by_csg=None, mitigated_by_csg=None, triggered_by_csg=None, triggered=None, min_of=None, max_of=None, has_min=None, has_max=None, current_risk=None, future_risk=None, secondary_threat=None, normal_operation=None, risk=None, direct_misbehaviours=None, indirect_misbehaviours=None, indirect_threats=None, caused_by=None, initial_cause=None, root_cause=None, likelihood=None, local_vars_configuration=None):  # noqa: E501
        """ThreatDB - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uri = None
        self._type = None
        self._id = None
        self._label = None
        self._description = None
        self._parent = None
        self._threatens = None
        self._applies_to = None
        self._frequency = None
        self._entry_points = None
        self._secondary_effect_conditions = None
        self._misbehaviours = None
        self._blocked_by_csg = None
        self._mitigated_by_csg = None
        self._triggered_by_csg = None
        self._triggered = None
        self._min_of = None
        self._max_of = None
        self._has_min = None
        self._has_max = None
        self._current_risk = None
        self._future_risk = None
        self._secondary_threat = None
        self._normal_operation = None
        self._risk = None
        self._direct_misbehaviours = None
        self._indirect_misbehaviours = None
        self._indirect_threats = None
        self._caused_by = None
        self._initial_cause = None
        self._root_cause = None
        self._likelihood = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if parent is not None:
            self.parent = parent
        if threatens is not None:
            self.threatens = threatens
        if applies_to is not None:
            self.applies_to = applies_to
        if frequency is not None:
            self.frequency = frequency
        if entry_points is not None:
            self.entry_points = entry_points
        if secondary_effect_conditions is not None:
            self.secondary_effect_conditions = secondary_effect_conditions
        if misbehaviours is not None:
            self.misbehaviours = misbehaviours
        if blocked_by_csg is not None:
            self.blocked_by_csg = blocked_by_csg
        if mitigated_by_csg is not None:
            self.mitigated_by_csg = mitigated_by_csg
        if triggered_by_csg is not None:
            self.triggered_by_csg = triggered_by_csg
        if triggered is not None:
            self.triggered = triggered
        if min_of is not None:
            self.min_of = min_of
        if max_of is not None:
            self.max_of = max_of
        if has_min is not None:
            self.has_min = has_min
        if has_max is not None:
            self.has_max = has_max
        if current_risk is not None:
            self.current_risk = current_risk
        if future_risk is not None:
            self.future_risk = future_risk
        if secondary_threat is not None:
            self.secondary_threat = secondary_threat
        if normal_operation is not None:
            self.normal_operation = normal_operation
        if risk is not None:
            self.risk = risk
        if direct_misbehaviours is not None:
            self.direct_misbehaviours = direct_misbehaviours
        if indirect_misbehaviours is not None:
            self.indirect_misbehaviours = indirect_misbehaviours
        if indirect_threats is not None:
            self.indirect_threats = indirect_threats
        if caused_by is not None:
            self.caused_by = caused_by
        if initial_cause is not None:
            self.initial_cause = initial_cause
        if root_cause is not None:
            self.root_cause = root_cause
        if likelihood is not None:
            self.likelihood = likelihood

    @property
    def uri(self):
        """Gets the uri of this ThreatDB.  # noqa: E501


        :return: The uri of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ThreatDB.


        :param uri: The uri of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def type(self):
        """Gets the type of this ThreatDB.  # noqa: E501


        :return: The type of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThreatDB.


        :param type: The type of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this ThreatDB.  # noqa: E501


        :return: The id of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThreatDB.


        :param id: The id of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this ThreatDB.  # noqa: E501


        :return: The label of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ThreatDB.


        :param label: The label of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this ThreatDB.  # noqa: E501


        :return: The description of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ThreatDB.


        :param description: The description of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def parent(self):
        """Gets the parent of this ThreatDB.  # noqa: E501


        :return: The parent of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ThreatDB.


        :param parent: The parent of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def threatens(self):
        """Gets the threatens of this ThreatDB.  # noqa: E501


        :return: The threatens of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._threatens

    @threatens.setter
    def threatens(self, threatens):
        """Sets the threatens of this ThreatDB.


        :param threatens: The threatens of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._threatens = threatens

    @property
    def applies_to(self):
        """Gets the applies_to of this ThreatDB.  # noqa: E501


        :return: The applies_to of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this ThreatDB.


        :param applies_to: The applies_to of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._applies_to = applies_to

    @property
    def frequency(self):
        """Gets the frequency of this ThreatDB.  # noqa: E501


        :return: The frequency of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ThreatDB.


        :param frequency: The frequency of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def entry_points(self):
        """Gets the entry_points of this ThreatDB.  # noqa: E501


        :return: The entry_points of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._entry_points

    @entry_points.setter
    def entry_points(self, entry_points):
        """Sets the entry_points of this ThreatDB.


        :param entry_points: The entry_points of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._entry_points = entry_points

    @property
    def secondary_effect_conditions(self):
        """Gets the secondary_effect_conditions of this ThreatDB.  # noqa: E501


        :return: The secondary_effect_conditions of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._secondary_effect_conditions

    @secondary_effect_conditions.setter
    def secondary_effect_conditions(self, secondary_effect_conditions):
        """Sets the secondary_effect_conditions of this ThreatDB.


        :param secondary_effect_conditions: The secondary_effect_conditions of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._secondary_effect_conditions = secondary_effect_conditions

    @property
    def misbehaviours(self):
        """Gets the misbehaviours of this ThreatDB.  # noqa: E501


        :return: The misbehaviours of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._misbehaviours

    @misbehaviours.setter
    def misbehaviours(self, misbehaviours):
        """Sets the misbehaviours of this ThreatDB.


        :param misbehaviours: The misbehaviours of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._misbehaviours = misbehaviours

    @property
    def blocked_by_csg(self):
        """Gets the blocked_by_csg of this ThreatDB.  # noqa: E501


        :return: The blocked_by_csg of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._blocked_by_csg

    @blocked_by_csg.setter
    def blocked_by_csg(self, blocked_by_csg):
        """Sets the blocked_by_csg of this ThreatDB.


        :param blocked_by_csg: The blocked_by_csg of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._blocked_by_csg = blocked_by_csg

    @property
    def mitigated_by_csg(self):
        """Gets the mitigated_by_csg of this ThreatDB.  # noqa: E501


        :return: The mitigated_by_csg of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._mitigated_by_csg

    @mitigated_by_csg.setter
    def mitigated_by_csg(self, mitigated_by_csg):
        """Sets the mitigated_by_csg of this ThreatDB.


        :param mitigated_by_csg: The mitigated_by_csg of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._mitigated_by_csg = mitigated_by_csg

    @property
    def triggered_by_csg(self):
        """Gets the triggered_by_csg of this ThreatDB.  # noqa: E501


        :return: The triggered_by_csg of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._triggered_by_csg

    @triggered_by_csg.setter
    def triggered_by_csg(self, triggered_by_csg):
        """Sets the triggered_by_csg of this ThreatDB.


        :param triggered_by_csg: The triggered_by_csg of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._triggered_by_csg = triggered_by_csg

    @property
    def triggered(self):
        """Gets the triggered of this ThreatDB.  # noqa: E501


        :return: The triggered of this ThreatDB.  # noqa: E501
        :rtype: bool
        """
        return self._triggered

    @triggered.setter
    def triggered(self, triggered):
        """Sets the triggered of this ThreatDB.


        :param triggered: The triggered of this ThreatDB.  # noqa: E501
        :type: bool
        """

        self._triggered = triggered

    @property
    def min_of(self):
        """Gets the min_of of this ThreatDB.  # noqa: E501


        :return: The min_of of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._min_of

    @min_of.setter
    def min_of(self, min_of):
        """Sets the min_of of this ThreatDB.


        :param min_of: The min_of of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._min_of = min_of

    @property
    def max_of(self):
        """Gets the max_of of this ThreatDB.  # noqa: E501


        :return: The max_of of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._max_of

    @max_of.setter
    def max_of(self, max_of):
        """Sets the max_of of this ThreatDB.


        :param max_of: The max_of of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._max_of = max_of

    @property
    def has_min(self):
        """Gets the has_min of this ThreatDB.  # noqa: E501


        :return: The has_min of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._has_min

    @has_min.setter
    def has_min(self, has_min):
        """Sets the has_min of this ThreatDB.


        :param has_min: The has_min of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._has_min = has_min

    @property
    def has_max(self):
        """Gets the has_max of this ThreatDB.  # noqa: E501


        :return: The has_max of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._has_max

    @has_max.setter
    def has_max(self, has_max):
        """Sets the has_max of this ThreatDB.


        :param has_max: The has_max of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._has_max = has_max

    @property
    def current_risk(self):
        """Gets the current_risk of this ThreatDB.  # noqa: E501


        :return: The current_risk of this ThreatDB.  # noqa: E501
        :rtype: bool
        """
        return self._current_risk

    @current_risk.setter
    def current_risk(self, current_risk):
        """Sets the current_risk of this ThreatDB.


        :param current_risk: The current_risk of this ThreatDB.  # noqa: E501
        :type: bool
        """

        self._current_risk = current_risk

    @property
    def future_risk(self):
        """Gets the future_risk of this ThreatDB.  # noqa: E501


        :return: The future_risk of this ThreatDB.  # noqa: E501
        :rtype: bool
        """
        return self._future_risk

    @future_risk.setter
    def future_risk(self, future_risk):
        """Sets the future_risk of this ThreatDB.


        :param future_risk: The future_risk of this ThreatDB.  # noqa: E501
        :type: bool
        """

        self._future_risk = future_risk

    @property
    def secondary_threat(self):
        """Gets the secondary_threat of this ThreatDB.  # noqa: E501


        :return: The secondary_threat of this ThreatDB.  # noqa: E501
        :rtype: bool
        """
        return self._secondary_threat

    @secondary_threat.setter
    def secondary_threat(self, secondary_threat):
        """Sets the secondary_threat of this ThreatDB.


        :param secondary_threat: The secondary_threat of this ThreatDB.  # noqa: E501
        :type: bool
        """

        self._secondary_threat = secondary_threat

    @property
    def normal_operation(self):
        """Gets the normal_operation of this ThreatDB.  # noqa: E501


        :return: The normal_operation of this ThreatDB.  # noqa: E501
        :rtype: bool
        """
        return self._normal_operation

    @normal_operation.setter
    def normal_operation(self, normal_operation):
        """Sets the normal_operation of this ThreatDB.


        :param normal_operation: The normal_operation of this ThreatDB.  # noqa: E501
        :type: bool
        """

        self._normal_operation = normal_operation

    @property
    def risk(self):
        """Gets the risk of this ThreatDB.  # noqa: E501


        :return: The risk of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this ThreatDB.


        :param risk: The risk of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._risk = risk

    @property
    def direct_misbehaviours(self):
        """Gets the direct_misbehaviours of this ThreatDB.  # noqa: E501


        :return: The direct_misbehaviours of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._direct_misbehaviours

    @direct_misbehaviours.setter
    def direct_misbehaviours(self, direct_misbehaviours):
        """Sets the direct_misbehaviours of this ThreatDB.


        :param direct_misbehaviours: The direct_misbehaviours of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._direct_misbehaviours = direct_misbehaviours

    @property
    def indirect_misbehaviours(self):
        """Gets the indirect_misbehaviours of this ThreatDB.  # noqa: E501


        :return: The indirect_misbehaviours of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._indirect_misbehaviours

    @indirect_misbehaviours.setter
    def indirect_misbehaviours(self, indirect_misbehaviours):
        """Sets the indirect_misbehaviours of this ThreatDB.


        :param indirect_misbehaviours: The indirect_misbehaviours of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._indirect_misbehaviours = indirect_misbehaviours

    @property
    def indirect_threats(self):
        """Gets the indirect_threats of this ThreatDB.  # noqa: E501


        :return: The indirect_threats of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._indirect_threats

    @indirect_threats.setter
    def indirect_threats(self, indirect_threats):
        """Sets the indirect_threats of this ThreatDB.


        :param indirect_threats: The indirect_threats of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._indirect_threats = indirect_threats

    @property
    def caused_by(self):
        """Gets the caused_by of this ThreatDB.  # noqa: E501


        :return: The caused_by of this ThreatDB.  # noqa: E501
        :rtype: list[str]
        """
        return self._caused_by

    @caused_by.setter
    def caused_by(self, caused_by):
        """Sets the caused_by of this ThreatDB.


        :param caused_by: The caused_by of this ThreatDB.  # noqa: E501
        :type: list[str]
        """

        self._caused_by = caused_by

    @property
    def initial_cause(self):
        """Gets the initial_cause of this ThreatDB.  # noqa: E501


        :return: The initial_cause of this ThreatDB.  # noqa: E501
        :rtype: bool
        """
        return self._initial_cause

    @initial_cause.setter
    def initial_cause(self, initial_cause):
        """Sets the initial_cause of this ThreatDB.


        :param initial_cause: The initial_cause of this ThreatDB.  # noqa: E501
        :type: bool
        """

        self._initial_cause = initial_cause

    @property
    def root_cause(self):
        """Gets the root_cause of this ThreatDB.  # noqa: E501


        :return: The root_cause of this ThreatDB.  # noqa: E501
        :rtype: bool
        """
        return self._root_cause

    @root_cause.setter
    def root_cause(self, root_cause):
        """Sets the root_cause of this ThreatDB.


        :param root_cause: The root_cause of this ThreatDB.  # noqa: E501
        :type: bool
        """

        self._root_cause = root_cause

    @property
    def likelihood(self):
        """Gets the likelihood of this ThreatDB.  # noqa: E501


        :return: The likelihood of this ThreatDB.  # noqa: E501
        :rtype: str
        """
        return self._likelihood

    @likelihood.setter
    def likelihood(self, likelihood):
        """Sets the likelihood of this ThreatDB.


        :param likelihood: The likelihood of this ThreatDB.  # noqa: E501
        :type: str
        """

        self._likelihood = likelihood

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThreatDB):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ThreatDB):
            return True

        return self.to_dict() != other.to_dict()
