# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class ComplianceThreatDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uri': 'str',
        'label': 'str',
        'description': 'str',
        'pattern': 'Pattern',
        'threatens_assets': 'str',
        'type': 'str',
        'resolved': 'bool',
        'acceptance_justification': 'str',
        'control_strategies': 'dict(str, str)',
        'id': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'label': 'label',
        'description': 'description',
        'pattern': 'pattern',
        'threatens_assets': 'threatensAssets',
        'type': 'type',
        'resolved': 'resolved',
        'acceptance_justification': 'acceptanceJustification',
        'control_strategies': 'controlStrategies',
        'id': 'id'
    }

    def __init__(self, uri=None, label=None, description=None, pattern=None, threatens_assets=None, type=None, resolved=None, acceptance_justification=None, control_strategies=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ComplianceThreatDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uri = None
        self._label = None
        self._description = None
        self._pattern = None
        self._threatens_assets = None
        self._type = None
        self._resolved = None
        self._acceptance_justification = None
        self._control_strategies = None
        self._id = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if pattern is not None:
            self.pattern = pattern
        if threatens_assets is not None:
            self.threatens_assets = threatens_assets
        if type is not None:
            self.type = type
        if resolved is not None:
            self.resolved = resolved
        if acceptance_justification is not None:
            self.acceptance_justification = acceptance_justification
        if control_strategies is not None:
            self.control_strategies = control_strategies
        if id is not None:
            self.id = id

    @property
    def uri(self):
        """Gets the uri of this ComplianceThreatDTO.  # noqa: E501


        :return: The uri of this ComplianceThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ComplianceThreatDTO.


        :param uri: The uri of this ComplianceThreatDTO.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def label(self):
        """Gets the label of this ComplianceThreatDTO.  # noqa: E501


        :return: The label of this ComplianceThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ComplianceThreatDTO.


        :param label: The label of this ComplianceThreatDTO.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this ComplianceThreatDTO.  # noqa: E501


        :return: The description of this ComplianceThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ComplianceThreatDTO.


        :param description: The description of this ComplianceThreatDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def pattern(self):
        """Gets the pattern of this ComplianceThreatDTO.  # noqa: E501


        :return: The pattern of this ComplianceThreatDTO.  # noqa: E501
        :rtype: Pattern
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ComplianceThreatDTO.


        :param pattern: The pattern of this ComplianceThreatDTO.  # noqa: E501
        :type: Pattern
        """

        self._pattern = pattern

    @property
    def threatens_assets(self):
        """Gets the threatens_assets of this ComplianceThreatDTO.  # noqa: E501


        :return: The threatens_assets of this ComplianceThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._threatens_assets

    @threatens_assets.setter
    def threatens_assets(self, threatens_assets):
        """Sets the threatens_assets of this ComplianceThreatDTO.


        :param threatens_assets: The threatens_assets of this ComplianceThreatDTO.  # noqa: E501
        :type: str
        """

        self._threatens_assets = threatens_assets

    @property
    def type(self):
        """Gets the type of this ComplianceThreatDTO.  # noqa: E501


        :return: The type of this ComplianceThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComplianceThreatDTO.


        :param type: The type of this ComplianceThreatDTO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def resolved(self):
        """Gets the resolved of this ComplianceThreatDTO.  # noqa: E501


        :return: The resolved of this ComplianceThreatDTO.  # noqa: E501
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this ComplianceThreatDTO.


        :param resolved: The resolved of this ComplianceThreatDTO.  # noqa: E501
        :type: bool
        """

        self._resolved = resolved

    @property
    def acceptance_justification(self):
        """Gets the acceptance_justification of this ComplianceThreatDTO.  # noqa: E501


        :return: The acceptance_justification of this ComplianceThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._acceptance_justification

    @acceptance_justification.setter
    def acceptance_justification(self, acceptance_justification):
        """Sets the acceptance_justification of this ComplianceThreatDTO.


        :param acceptance_justification: The acceptance_justification of this ComplianceThreatDTO.  # noqa: E501
        :type: str
        """

        self._acceptance_justification = acceptance_justification

    @property
    def control_strategies(self):
        """Gets the control_strategies of this ComplianceThreatDTO.  # noqa: E501


        :return: The control_strategies of this ComplianceThreatDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._control_strategies

    @control_strategies.setter
    def control_strategies(self, control_strategies):
        """Sets the control_strategies of this ComplianceThreatDTO.


        :param control_strategies: The control_strategies of this ComplianceThreatDTO.  # noqa: E501
        :type: dict(str, str)
        """
        allowed_values = ["BLOCK", "MITIGATE", "TRIGGER"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(control_strategies.values()).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values in `control_strategies` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(control_strategies.values()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._control_strategies = control_strategies

    @property
    def id(self):
        """Gets the id of this ComplianceThreatDTO.  # noqa: E501


        :return: The id of this ComplianceThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComplianceThreatDTO.


        :param id: The id of this ComplianceThreatDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceThreatDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComplianceThreatDTO):
            return True

        return self.to_dict() != other.to_dict()
