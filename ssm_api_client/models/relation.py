# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class Relation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_from': 'str',
        'from_id': 'str',
        'to': 'str',
        'to_id': 'str',
        'type': 'str',
        'label': 'str',
        'source_cardinality': 'int',
        'target_cardinality': 'int',
        'asserted': 'bool',
        'visible': 'bool',
        'immutable': 'bool',
        'hidden': 'bool',
        'inferred_assets': 'list[str]',
        'id': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'from_id': 'fromID',
        'to': 'to',
        'to_id': 'toID',
        'type': 'type',
        'label': 'label',
        'source_cardinality': 'sourceCardinality',
        'target_cardinality': 'targetCardinality',
        'asserted': 'asserted',
        'visible': 'visible',
        'immutable': 'immutable',
        'hidden': 'hidden',
        'inferred_assets': 'inferredAssets',
        'id': 'id'
    }

    def __init__(self, _from=None, from_id=None, to=None, to_id=None, type=None, label=None, source_cardinality=None, target_cardinality=None, asserted=None, visible=None, immutable=None, hidden=None, inferred_assets=None, id=None, local_vars_configuration=None):  # noqa: E501
        """Relation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__from = None
        self._from_id = None
        self._to = None
        self._to_id = None
        self._type = None
        self._label = None
        self._source_cardinality = None
        self._target_cardinality = None
        self._asserted = None
        self._visible = None
        self._immutable = None
        self._hidden = None
        self._inferred_assets = None
        self._id = None
        self.discriminator = None

        if _from is not None:
            self._from = _from
        if from_id is not None:
            self.from_id = from_id
        if to is not None:
            self.to = to
        if to_id is not None:
            self.to_id = to_id
        if type is not None:
            self.type = type
        if label is not None:
            self.label = label
        if source_cardinality is not None:
            self.source_cardinality = source_cardinality
        if target_cardinality is not None:
            self.target_cardinality = target_cardinality
        if asserted is not None:
            self.asserted = asserted
        if visible is not None:
            self.visible = visible
        if immutable is not None:
            self.immutable = immutable
        if hidden is not None:
            self.hidden = hidden
        if inferred_assets is not None:
            self.inferred_assets = inferred_assets
        if id is not None:
            self.id = id

    @property
    def _from(self):
        """Gets the _from of this Relation.  # noqa: E501


        :return: The _from of this Relation.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Relation.


        :param _from: The _from of this Relation.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def from_id(self):
        """Gets the from_id of this Relation.  # noqa: E501


        :return: The from_id of this Relation.  # noqa: E501
        :rtype: str
        """
        return self._from_id

    @from_id.setter
    def from_id(self, from_id):
        """Sets the from_id of this Relation.


        :param from_id: The from_id of this Relation.  # noqa: E501
        :type: str
        """

        self._from_id = from_id

    @property
    def to(self):
        """Gets the to of this Relation.  # noqa: E501


        :return: The to of this Relation.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Relation.


        :param to: The to of this Relation.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def to_id(self):
        """Gets the to_id of this Relation.  # noqa: E501


        :return: The to_id of this Relation.  # noqa: E501
        :rtype: str
        """
        return self._to_id

    @to_id.setter
    def to_id(self, to_id):
        """Sets the to_id of this Relation.


        :param to_id: The to_id of this Relation.  # noqa: E501
        :type: str
        """

        self._to_id = to_id

    @property
    def type(self):
        """Gets the type of this Relation.  # noqa: E501


        :return: The type of this Relation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Relation.


        :param type: The type of this Relation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def label(self):
        """Gets the label of this Relation.  # noqa: E501


        :return: The label of this Relation.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Relation.


        :param label: The label of this Relation.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def source_cardinality(self):
        """Gets the source_cardinality of this Relation.  # noqa: E501


        :return: The source_cardinality of this Relation.  # noqa: E501
        :rtype: int
        """
        return self._source_cardinality

    @source_cardinality.setter
    def source_cardinality(self, source_cardinality):
        """Sets the source_cardinality of this Relation.


        :param source_cardinality: The source_cardinality of this Relation.  # noqa: E501
        :type: int
        """

        self._source_cardinality = source_cardinality

    @property
    def target_cardinality(self):
        """Gets the target_cardinality of this Relation.  # noqa: E501


        :return: The target_cardinality of this Relation.  # noqa: E501
        :rtype: int
        """
        return self._target_cardinality

    @target_cardinality.setter
    def target_cardinality(self, target_cardinality):
        """Sets the target_cardinality of this Relation.


        :param target_cardinality: The target_cardinality of this Relation.  # noqa: E501
        :type: int
        """

        self._target_cardinality = target_cardinality

    @property
    def asserted(self):
        """Gets the asserted of this Relation.  # noqa: E501


        :return: The asserted of this Relation.  # noqa: E501
        :rtype: bool
        """
        return self._asserted

    @asserted.setter
    def asserted(self, asserted):
        """Sets the asserted of this Relation.


        :param asserted: The asserted of this Relation.  # noqa: E501
        :type: bool
        """

        self._asserted = asserted

    @property
    def visible(self):
        """Gets the visible of this Relation.  # noqa: E501


        :return: The visible of this Relation.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Relation.


        :param visible: The visible of this Relation.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def immutable(self):
        """Gets the immutable of this Relation.  # noqa: E501


        :return: The immutable of this Relation.  # noqa: E501
        :rtype: bool
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this Relation.


        :param immutable: The immutable of this Relation.  # noqa: E501
        :type: bool
        """

        self._immutable = immutable

    @property
    def hidden(self):
        """Gets the hidden of this Relation.  # noqa: E501


        :return: The hidden of this Relation.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Relation.


        :param hidden: The hidden of this Relation.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def inferred_assets(self):
        """Gets the inferred_assets of this Relation.  # noqa: E501


        :return: The inferred_assets of this Relation.  # noqa: E501
        :rtype: list[str]
        """
        return self._inferred_assets

    @inferred_assets.setter
    def inferred_assets(self, inferred_assets):
        """Sets the inferred_assets of this Relation.


        :param inferred_assets: The inferred_assets of this Relation.  # noqa: E501
        :type: list[str]
        """

        self._inferred_assets = inferred_assets

    @property
    def id(self):
        """Gets the id of this Relation.  # noqa: E501


        :return: The id of this Relation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Relation.


        :param id: The id of this Relation.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Relation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Relation):
            return True

        return self.to_dict() != other.to_dict()
