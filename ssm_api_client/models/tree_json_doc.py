# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class TreeJsonDoc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'graphs': 'dict(str, Graph)',
        'uri_prefix': 'str'
    }

    attribute_map = {
        'graphs': 'graphs',
        'uri_prefix': 'uriPrefix'
    }

    def __init__(self, graphs=None, uri_prefix=None, local_vars_configuration=None):  # noqa: E501
        """TreeJsonDoc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._graphs = None
        self._uri_prefix = None
        self.discriminator = None

        if graphs is not None:
            self.graphs = graphs
        if uri_prefix is not None:
            self.uri_prefix = uri_prefix

    @property
    def graphs(self):
        """Gets the graphs of this TreeJsonDoc.  # noqa: E501


        :return: The graphs of this TreeJsonDoc.  # noqa: E501
        :rtype: dict(str, Graph)
        """
        return self._graphs

    @graphs.setter
    def graphs(self, graphs):
        """Sets the graphs of this TreeJsonDoc.


        :param graphs: The graphs of this TreeJsonDoc.  # noqa: E501
        :type: dict(str, Graph)
        """

        self._graphs = graphs

    @property
    def uri_prefix(self):
        """Gets the uri_prefix of this TreeJsonDoc.  # noqa: E501


        :return: The uri_prefix of this TreeJsonDoc.  # noqa: E501
        :rtype: str
        """
        return self._uri_prefix

    @uri_prefix.setter
    def uri_prefix(self, uri_prefix):
        """Sets the uri_prefix of this TreeJsonDoc.


        :param uri_prefix: The uri_prefix of this TreeJsonDoc.  # noqa: E501
        :type: str
        """

        self._uri_prefix = uri_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreeJsonDoc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TreeJsonDoc):
            return True

        return self.to_dict() != other.to_dict()
