# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class ThreatDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uri': 'str',
        'label': 'str',
        'description': 'str',
        'pattern': 'Pattern',
        'threatens_assets': 'str',
        'type': 'str',
        'resolved': 'bool',
        'acceptance_justification': 'str',
        'misbehaviours': 'list[str]',
        'indirect_effects': 'list[str]',
        'secondary_threat': 'bool',
        'secondary_effect_conditions': 'list[str]',
        'control_strategies': 'dict(str, str)',
        'entry_points': 'list[str]',
        'likelihood': 'Level',
        'risk_level': 'Level',
        'root_cause': 'bool',
        'id': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'label': 'label',
        'description': 'description',
        'pattern': 'pattern',
        'threatens_assets': 'threatensAssets',
        'type': 'type',
        'resolved': 'resolved',
        'acceptance_justification': 'acceptanceJustification',
        'misbehaviours': 'misbehaviours',
        'indirect_effects': 'indirectEffects',
        'secondary_threat': 'secondaryThreat',
        'secondary_effect_conditions': 'secondaryEffectConditions',
        'control_strategies': 'controlStrategies',
        'entry_points': 'entryPoints',
        'likelihood': 'likelihood',
        'risk_level': 'riskLevel',
        'root_cause': 'rootCause',
        'id': 'id'
    }

    def __init__(self, uri=None, label=None, description=None, pattern=None, threatens_assets=None, type=None, resolved=None, acceptance_justification=None, misbehaviours=None, indirect_effects=None, secondary_threat=None, secondary_effect_conditions=None, control_strategies=None, entry_points=None, likelihood=None, risk_level=None, root_cause=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ThreatDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uri = None
        self._label = None
        self._description = None
        self._pattern = None
        self._threatens_assets = None
        self._type = None
        self._resolved = None
        self._acceptance_justification = None
        self._misbehaviours = None
        self._indirect_effects = None
        self._secondary_threat = None
        self._secondary_effect_conditions = None
        self._control_strategies = None
        self._entry_points = None
        self._likelihood = None
        self._risk_level = None
        self._root_cause = None
        self._id = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if pattern is not None:
            self.pattern = pattern
        if threatens_assets is not None:
            self.threatens_assets = threatens_assets
        if type is not None:
            self.type = type
        if resolved is not None:
            self.resolved = resolved
        if acceptance_justification is not None:
            self.acceptance_justification = acceptance_justification
        if misbehaviours is not None:
            self.misbehaviours = misbehaviours
        if indirect_effects is not None:
            self.indirect_effects = indirect_effects
        if secondary_threat is not None:
            self.secondary_threat = secondary_threat
        if secondary_effect_conditions is not None:
            self.secondary_effect_conditions = secondary_effect_conditions
        if control_strategies is not None:
            self.control_strategies = control_strategies
        if entry_points is not None:
            self.entry_points = entry_points
        if likelihood is not None:
            self.likelihood = likelihood
        if risk_level is not None:
            self.risk_level = risk_level
        if root_cause is not None:
            self.root_cause = root_cause
        if id is not None:
            self.id = id

    @property
    def uri(self):
        """Gets the uri of this ThreatDTO.  # noqa: E501


        :return: The uri of this ThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ThreatDTO.


        :param uri: The uri of this ThreatDTO.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def label(self):
        """Gets the label of this ThreatDTO.  # noqa: E501


        :return: The label of this ThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ThreatDTO.


        :param label: The label of this ThreatDTO.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this ThreatDTO.  # noqa: E501


        :return: The description of this ThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ThreatDTO.


        :param description: The description of this ThreatDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def pattern(self):
        """Gets the pattern of this ThreatDTO.  # noqa: E501


        :return: The pattern of this ThreatDTO.  # noqa: E501
        :rtype: Pattern
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ThreatDTO.


        :param pattern: The pattern of this ThreatDTO.  # noqa: E501
        :type: Pattern
        """

        self._pattern = pattern

    @property
    def threatens_assets(self):
        """Gets the threatens_assets of this ThreatDTO.  # noqa: E501


        :return: The threatens_assets of this ThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._threatens_assets

    @threatens_assets.setter
    def threatens_assets(self, threatens_assets):
        """Sets the threatens_assets of this ThreatDTO.


        :param threatens_assets: The threatens_assets of this ThreatDTO.  # noqa: E501
        :type: str
        """

        self._threatens_assets = threatens_assets

    @property
    def type(self):
        """Gets the type of this ThreatDTO.  # noqa: E501


        :return: The type of this ThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThreatDTO.


        :param type: The type of this ThreatDTO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def resolved(self):
        """Gets the resolved of this ThreatDTO.  # noqa: E501


        :return: The resolved of this ThreatDTO.  # noqa: E501
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this ThreatDTO.


        :param resolved: The resolved of this ThreatDTO.  # noqa: E501
        :type: bool
        """

        self._resolved = resolved

    @property
    def acceptance_justification(self):
        """Gets the acceptance_justification of this ThreatDTO.  # noqa: E501


        :return: The acceptance_justification of this ThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._acceptance_justification

    @acceptance_justification.setter
    def acceptance_justification(self, acceptance_justification):
        """Sets the acceptance_justification of this ThreatDTO.


        :param acceptance_justification: The acceptance_justification of this ThreatDTO.  # noqa: E501
        :type: str
        """

        self._acceptance_justification = acceptance_justification

    @property
    def misbehaviours(self):
        """Gets the misbehaviours of this ThreatDTO.  # noqa: E501


        :return: The misbehaviours of this ThreatDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._misbehaviours

    @misbehaviours.setter
    def misbehaviours(self, misbehaviours):
        """Sets the misbehaviours of this ThreatDTO.


        :param misbehaviours: The misbehaviours of this ThreatDTO.  # noqa: E501
        :type: list[str]
        """

        self._misbehaviours = misbehaviours

    @property
    def indirect_effects(self):
        """Gets the indirect_effects of this ThreatDTO.  # noqa: E501


        :return: The indirect_effects of this ThreatDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._indirect_effects

    @indirect_effects.setter
    def indirect_effects(self, indirect_effects):
        """Sets the indirect_effects of this ThreatDTO.


        :param indirect_effects: The indirect_effects of this ThreatDTO.  # noqa: E501
        :type: list[str]
        """

        self._indirect_effects = indirect_effects

    @property
    def secondary_threat(self):
        """Gets the secondary_threat of this ThreatDTO.  # noqa: E501


        :return: The secondary_threat of this ThreatDTO.  # noqa: E501
        :rtype: bool
        """
        return self._secondary_threat

    @secondary_threat.setter
    def secondary_threat(self, secondary_threat):
        """Sets the secondary_threat of this ThreatDTO.


        :param secondary_threat: The secondary_threat of this ThreatDTO.  # noqa: E501
        :type: bool
        """

        self._secondary_threat = secondary_threat

    @property
    def secondary_effect_conditions(self):
        """Gets the secondary_effect_conditions of this ThreatDTO.  # noqa: E501


        :return: The secondary_effect_conditions of this ThreatDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._secondary_effect_conditions

    @secondary_effect_conditions.setter
    def secondary_effect_conditions(self, secondary_effect_conditions):
        """Sets the secondary_effect_conditions of this ThreatDTO.


        :param secondary_effect_conditions: The secondary_effect_conditions of this ThreatDTO.  # noqa: E501
        :type: list[str]
        """

        self._secondary_effect_conditions = secondary_effect_conditions

    @property
    def control_strategies(self):
        """Gets the control_strategies of this ThreatDTO.  # noqa: E501


        :return: The control_strategies of this ThreatDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._control_strategies

    @control_strategies.setter
    def control_strategies(self, control_strategies):
        """Sets the control_strategies of this ThreatDTO.


        :param control_strategies: The control_strategies of this ThreatDTO.  # noqa: E501
        :type: dict(str, str)
        """
        allowed_values = ["BLOCK", "MITIGATE", "TRIGGER"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(control_strategies.values()).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values in `control_strategies` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(control_strategies.values()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._control_strategies = control_strategies

    @property
    def entry_points(self):
        """Gets the entry_points of this ThreatDTO.  # noqa: E501


        :return: The entry_points of this ThreatDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._entry_points

    @entry_points.setter
    def entry_points(self, entry_points):
        """Sets the entry_points of this ThreatDTO.


        :param entry_points: The entry_points of this ThreatDTO.  # noqa: E501
        :type: list[str]
        """

        self._entry_points = entry_points

    @property
    def likelihood(self):
        """Gets the likelihood of this ThreatDTO.  # noqa: E501


        :return: The likelihood of this ThreatDTO.  # noqa: E501
        :rtype: Level
        """
        return self._likelihood

    @likelihood.setter
    def likelihood(self, likelihood):
        """Sets the likelihood of this ThreatDTO.


        :param likelihood: The likelihood of this ThreatDTO.  # noqa: E501
        :type: Level
        """

        self._likelihood = likelihood

    @property
    def risk_level(self):
        """Gets the risk_level of this ThreatDTO.  # noqa: E501


        :return: The risk_level of this ThreatDTO.  # noqa: E501
        :rtype: Level
        """
        return self._risk_level

    @risk_level.setter
    def risk_level(self, risk_level):
        """Sets the risk_level of this ThreatDTO.


        :param risk_level: The risk_level of this ThreatDTO.  # noqa: E501
        :type: Level
        """

        self._risk_level = risk_level

    @property
    def root_cause(self):
        """Gets the root_cause of this ThreatDTO.  # noqa: E501


        :return: The root_cause of this ThreatDTO.  # noqa: E501
        :rtype: bool
        """
        return self._root_cause

    @root_cause.setter
    def root_cause(self, root_cause):
        """Sets the root_cause of this ThreatDTO.


        :param root_cause: The root_cause of this ThreatDTO.  # noqa: E501
        :type: bool
        """

        self._root_cause = root_cause

    @property
    def id(self):
        """Gets the id of this ThreatDTO.  # noqa: E501


        :return: The id of this ThreatDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThreatDTO.


        :param id: The id of this ThreatDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThreatDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ThreatDTO):
            return True

        return self.to_dict() != other.to_dict()
