# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class Asset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uri': 'str',
        'label': 'str',
        'description': 'str',
        'parents': 'list[str]',
        'type': 'str',
        'asserted': 'bool',
        'visible': 'bool',
        'icon_x': 'int',
        'icon_y': 'int',
        'min_cardinality': 'int',
        'max_cardinality': 'int',
        'population': 'str',
        'control_sets': 'dict(str, ControlSet)',
        'misbehaviour_sets': 'dict(str, MisbehaviourSet)',
        'inferred_assets': 'list[str]',
        'trustworthiness_attribute_sets': 'dict(str, TrustworthinessAttributeSet)',
        'metadata': 'list[MetadataPair]',
        'id': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'label': 'label',
        'description': 'description',
        'parents': 'parents',
        'type': 'type',
        'asserted': 'asserted',
        'visible': 'visible',
        'icon_x': 'iconX',
        'icon_y': 'iconY',
        'min_cardinality': 'minCardinality',
        'max_cardinality': 'maxCardinality',
        'population': 'population',
        'control_sets': 'controlSets',
        'misbehaviour_sets': 'misbehaviourSets',
        'inferred_assets': 'inferredAssets',
        'trustworthiness_attribute_sets': 'trustworthinessAttributeSets',
        'metadata': 'metadata',
        'id': 'id'
    }

    def __init__(self, uri=None, label=None, description=None, parents=None, type=None, asserted=None, visible=None, icon_x=None, icon_y=None, min_cardinality=None, max_cardinality=None, population=None, control_sets=None, misbehaviour_sets=None, inferred_assets=None, trustworthiness_attribute_sets=None, metadata=None, id=None, local_vars_configuration=None):  # noqa: E501
        """Asset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uri = None
        self._label = None
        self._description = None
        self._parents = None
        self._type = None
        self._asserted = None
        self._visible = None
        self._icon_x = None
        self._icon_y = None
        self._min_cardinality = None
        self._max_cardinality = None
        self._population = None
        self._control_sets = None
        self._misbehaviour_sets = None
        self._inferred_assets = None
        self._trustworthiness_attribute_sets = None
        self._metadata = None
        self._id = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if parents is not None:
            self.parents = parents
        if type is not None:
            self.type = type
        if asserted is not None:
            self.asserted = asserted
        if visible is not None:
            self.visible = visible
        if icon_x is not None:
            self.icon_x = icon_x
        if icon_y is not None:
            self.icon_y = icon_y
        if min_cardinality is not None:
            self.min_cardinality = min_cardinality
        if max_cardinality is not None:
            self.max_cardinality = max_cardinality
        if population is not None:
            self.population = population
        if control_sets is not None:
            self.control_sets = control_sets
        if misbehaviour_sets is not None:
            self.misbehaviour_sets = misbehaviour_sets
        if inferred_assets is not None:
            self.inferred_assets = inferred_assets
        if trustworthiness_attribute_sets is not None:
            self.trustworthiness_attribute_sets = trustworthiness_attribute_sets
        if metadata is not None:
            self.metadata = metadata
        if id is not None:
            self.id = id

    @property
    def uri(self):
        """Gets the uri of this Asset.  # noqa: E501


        :return: The uri of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Asset.


        :param uri: The uri of this Asset.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def label(self):
        """Gets the label of this Asset.  # noqa: E501


        :return: The label of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Asset.


        :param label: The label of this Asset.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this Asset.  # noqa: E501


        :return: The description of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Asset.


        :param description: The description of this Asset.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def parents(self):
        """Gets the parents of this Asset.  # noqa: E501


        :return: The parents of this Asset.  # noqa: E501
        :rtype: list[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this Asset.


        :param parents: The parents of this Asset.  # noqa: E501
        :type: list[str]
        """

        self._parents = parents

    @property
    def type(self):
        """Gets the type of this Asset.  # noqa: E501


        :return: The type of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Asset.


        :param type: The type of this Asset.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def asserted(self):
        """Gets the asserted of this Asset.  # noqa: E501


        :return: The asserted of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._asserted

    @asserted.setter
    def asserted(self, asserted):
        """Sets the asserted of this Asset.


        :param asserted: The asserted of this Asset.  # noqa: E501
        :type: bool
        """

        self._asserted = asserted

    @property
    def visible(self):
        """Gets the visible of this Asset.  # noqa: E501


        :return: The visible of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Asset.


        :param visible: The visible of this Asset.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def icon_x(self):
        """Gets the icon_x of this Asset.  # noqa: E501


        :return: The icon_x of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._icon_x

    @icon_x.setter
    def icon_x(self, icon_x):
        """Sets the icon_x of this Asset.


        :param icon_x: The icon_x of this Asset.  # noqa: E501
        :type: int
        """

        self._icon_x = icon_x

    @property
    def icon_y(self):
        """Gets the icon_y of this Asset.  # noqa: E501


        :return: The icon_y of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._icon_y

    @icon_y.setter
    def icon_y(self, icon_y):
        """Sets the icon_y of this Asset.


        :param icon_y: The icon_y of this Asset.  # noqa: E501
        :type: int
        """

        self._icon_y = icon_y

    @property
    def min_cardinality(self):
        """Gets the min_cardinality of this Asset.  # noqa: E501


        :return: The min_cardinality of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._min_cardinality

    @min_cardinality.setter
    def min_cardinality(self, min_cardinality):
        """Sets the min_cardinality of this Asset.


        :param min_cardinality: The min_cardinality of this Asset.  # noqa: E501
        :type: int
        """

        self._min_cardinality = min_cardinality

    @property
    def max_cardinality(self):
        """Gets the max_cardinality of this Asset.  # noqa: E501


        :return: The max_cardinality of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._max_cardinality

    @max_cardinality.setter
    def max_cardinality(self, max_cardinality):
        """Sets the max_cardinality of this Asset.


        :param max_cardinality: The max_cardinality of this Asset.  # noqa: E501
        :type: int
        """

        self._max_cardinality = max_cardinality

    @property
    def population(self):
        """Gets the population of this Asset.  # noqa: E501


        :return: The population of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this Asset.


        :param population: The population of this Asset.  # noqa: E501
        :type: str
        """

        self._population = population

    @property
    def control_sets(self):
        """Gets the control_sets of this Asset.  # noqa: E501


        :return: The control_sets of this Asset.  # noqa: E501
        :rtype: dict(str, ControlSet)
        """
        return self._control_sets

    @control_sets.setter
    def control_sets(self, control_sets):
        """Sets the control_sets of this Asset.


        :param control_sets: The control_sets of this Asset.  # noqa: E501
        :type: dict(str, ControlSet)
        """

        self._control_sets = control_sets

    @property
    def misbehaviour_sets(self):
        """Gets the misbehaviour_sets of this Asset.  # noqa: E501


        :return: The misbehaviour_sets of this Asset.  # noqa: E501
        :rtype: dict(str, MisbehaviourSet)
        """
        return self._misbehaviour_sets

    @misbehaviour_sets.setter
    def misbehaviour_sets(self, misbehaviour_sets):
        """Sets the misbehaviour_sets of this Asset.


        :param misbehaviour_sets: The misbehaviour_sets of this Asset.  # noqa: E501
        :type: dict(str, MisbehaviourSet)
        """

        self._misbehaviour_sets = misbehaviour_sets

    @property
    def inferred_assets(self):
        """Gets the inferred_assets of this Asset.  # noqa: E501


        :return: The inferred_assets of this Asset.  # noqa: E501
        :rtype: list[str]
        """
        return self._inferred_assets

    @inferred_assets.setter
    def inferred_assets(self, inferred_assets):
        """Sets the inferred_assets of this Asset.


        :param inferred_assets: The inferred_assets of this Asset.  # noqa: E501
        :type: list[str]
        """

        self._inferred_assets = inferred_assets

    @property
    def trustworthiness_attribute_sets(self):
        """Gets the trustworthiness_attribute_sets of this Asset.  # noqa: E501


        :return: The trustworthiness_attribute_sets of this Asset.  # noqa: E501
        :rtype: dict(str, TrustworthinessAttributeSet)
        """
        return self._trustworthiness_attribute_sets

    @trustworthiness_attribute_sets.setter
    def trustworthiness_attribute_sets(self, trustworthiness_attribute_sets):
        """Sets the trustworthiness_attribute_sets of this Asset.


        :param trustworthiness_attribute_sets: The trustworthiness_attribute_sets of this Asset.  # noqa: E501
        :type: dict(str, TrustworthinessAttributeSet)
        """

        self._trustworthiness_attribute_sets = trustworthiness_attribute_sets

    @property
    def metadata(self):
        """Gets the metadata of this Asset.  # noqa: E501


        :return: The metadata of this Asset.  # noqa: E501
        :rtype: list[MetadataPair]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Asset.


        :param metadata: The metadata of this Asset.  # noqa: E501
        :type: list[MetadataPair]
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this Asset.  # noqa: E501


        :return: The id of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.


        :param id: The id of this Asset.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Asset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Asset):
            return True

        return self.to_dict() != other.to_dict()
