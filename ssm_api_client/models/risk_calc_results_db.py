# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class RiskCalcResultsDB(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model': 'ModelDB',
        'threats': 'dict(str, ThreatDB)',
        'misbehaviour_sets': 'dict(str, MisbehaviourSetDB)',
        'twas': 'dict(str, TrustworthinessAttributeSetDB)',
        'cs': 'dict(str, ControlSetDB)',
        'levels': 'dict(str, dict(str, LevelDB))',
        'misbehaviours': 'dict(str, MisbehaviourDB)',
        'controls': 'dict(str, ControlDB)'
    }

    attribute_map = {
        'model': 'model',
        'threats': 'threats',
        'misbehaviour_sets': 'misbehaviourSets',
        'twas': 'twas',
        'cs': 'cs',
        'levels': 'levels',
        'misbehaviours': 'misbehaviours',
        'controls': 'controls'
    }

    def __init__(self, model=None, threats=None, misbehaviour_sets=None, twas=None, cs=None, levels=None, misbehaviours=None, controls=None, local_vars_configuration=None):  # noqa: E501
        """RiskCalcResultsDB - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model = None
        self._threats = None
        self._misbehaviour_sets = None
        self._twas = None
        self._cs = None
        self._levels = None
        self._misbehaviours = None
        self._controls = None
        self.discriminator = None

        if model is not None:
            self.model = model
        if threats is not None:
            self.threats = threats
        if misbehaviour_sets is not None:
            self.misbehaviour_sets = misbehaviour_sets
        if twas is not None:
            self.twas = twas
        if cs is not None:
            self.cs = cs
        if levels is not None:
            self.levels = levels
        if misbehaviours is not None:
            self.misbehaviours = misbehaviours
        if controls is not None:
            self.controls = controls

    @property
    def model(self):
        """Gets the model of this RiskCalcResultsDB.  # noqa: E501


        :return: The model of this RiskCalcResultsDB.  # noqa: E501
        :rtype: ModelDB
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RiskCalcResultsDB.


        :param model: The model of this RiskCalcResultsDB.  # noqa: E501
        :type: ModelDB
        """

        self._model = model

    @property
    def threats(self):
        """Gets the threats of this RiskCalcResultsDB.  # noqa: E501


        :return: The threats of this RiskCalcResultsDB.  # noqa: E501
        :rtype: dict(str, ThreatDB)
        """
        return self._threats

    @threats.setter
    def threats(self, threats):
        """Sets the threats of this RiskCalcResultsDB.


        :param threats: The threats of this RiskCalcResultsDB.  # noqa: E501
        :type: dict(str, ThreatDB)
        """

        self._threats = threats

    @property
    def misbehaviour_sets(self):
        """Gets the misbehaviour_sets of this RiskCalcResultsDB.  # noqa: E501


        :return: The misbehaviour_sets of this RiskCalcResultsDB.  # noqa: E501
        :rtype: dict(str, MisbehaviourSetDB)
        """
        return self._misbehaviour_sets

    @misbehaviour_sets.setter
    def misbehaviour_sets(self, misbehaviour_sets):
        """Sets the misbehaviour_sets of this RiskCalcResultsDB.


        :param misbehaviour_sets: The misbehaviour_sets of this RiskCalcResultsDB.  # noqa: E501
        :type: dict(str, MisbehaviourSetDB)
        """

        self._misbehaviour_sets = misbehaviour_sets

    @property
    def twas(self):
        """Gets the twas of this RiskCalcResultsDB.  # noqa: E501


        :return: The twas of this RiskCalcResultsDB.  # noqa: E501
        :rtype: dict(str, TrustworthinessAttributeSetDB)
        """
        return self._twas

    @twas.setter
    def twas(self, twas):
        """Sets the twas of this RiskCalcResultsDB.


        :param twas: The twas of this RiskCalcResultsDB.  # noqa: E501
        :type: dict(str, TrustworthinessAttributeSetDB)
        """

        self._twas = twas

    @property
    def cs(self):
        """Gets the cs of this RiskCalcResultsDB.  # noqa: E501


        :return: The cs of this RiskCalcResultsDB.  # noqa: E501
        :rtype: dict(str, ControlSetDB)
        """
        return self._cs

    @cs.setter
    def cs(self, cs):
        """Sets the cs of this RiskCalcResultsDB.


        :param cs: The cs of this RiskCalcResultsDB.  # noqa: E501
        :type: dict(str, ControlSetDB)
        """

        self._cs = cs

    @property
    def levels(self):
        """Gets the levels of this RiskCalcResultsDB.  # noqa: E501


        :return: The levels of this RiskCalcResultsDB.  # noqa: E501
        :rtype: dict(str, dict(str, LevelDB))
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """Sets the levels of this RiskCalcResultsDB.


        :param levels: The levels of this RiskCalcResultsDB.  # noqa: E501
        :type: dict(str, dict(str, LevelDB))
        """

        self._levels = levels

    @property
    def misbehaviours(self):
        """Gets the misbehaviours of this RiskCalcResultsDB.  # noqa: E501


        :return: The misbehaviours of this RiskCalcResultsDB.  # noqa: E501
        :rtype: dict(str, MisbehaviourDB)
        """
        return self._misbehaviours

    @misbehaviours.setter
    def misbehaviours(self, misbehaviours):
        """Sets the misbehaviours of this RiskCalcResultsDB.


        :param misbehaviours: The misbehaviours of this RiskCalcResultsDB.  # noqa: E501
        :type: dict(str, MisbehaviourDB)
        """

        self._misbehaviours = misbehaviours

    @property
    def controls(self):
        """Gets the controls of this RiskCalcResultsDB.  # noqa: E501


        :return: The controls of this RiskCalcResultsDB.  # noqa: E501
        :rtype: dict(str, ControlDB)
        """
        return self._controls

    @controls.setter
    def controls(self, controls):
        """Sets the controls of this RiskCalcResultsDB.


        :param controls: The controls of this RiskCalcResultsDB.  # noqa: E501
        :type: dict(str, ControlDB)
        """

        self._controls = controls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskCalcResultsDB):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RiskCalcResultsDB):
            return True

        return self.to_dict() != other.to_dict()
