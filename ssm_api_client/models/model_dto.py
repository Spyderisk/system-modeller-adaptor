# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class ModelDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'id': 'str',
        'description': 'str',
        'domain_graph': 'str',
        'domain_version': 'str',
        'validated_domain_version': 'str',
        'valid': 'bool',
        'risk_levels_valid': 'bool',
        'risk_calculation_mode': 'str',
        'calculating_risks': 'bool',
        'can_be_edited': 'bool',
        'can_be_shared': 'bool',
        'risk': 'Level',
        'threats': 'list[ThreatDTO]',
        'control_strategies': 'dict(str, ControlStrategyDTO)',
        'compliance_threats': 'list[ComplianceThreatDTO]',
        'compliance_sets': 'list[ComplianceSetDTO]',
        'misbehaviour_sets': 'dict(str, MisbehaviourSet)',
        'twas': 'dict(str, TrustworthinessAttributeSet)',
        'control_sets': 'list[ControlSet]',
        'user_id': 'str',
        'editor_id': 'str',
        'created': 'str',
        'modified': 'str',
        'modified_by': 'str',
        'levels': 'dict(str, list[Level])',
        'risk_vector': 'dict(str, RiskLevelCount)',
        'assets': 'list[AssetDTO]',
        'relations': 'list[Relation]',
        'groups': 'list[AssetGroupDTO]',
        'loading_id': 'str',
        'validating': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'description': 'description',
        'domain_graph': 'domainGraph',
        'domain_version': 'domainVersion',
        'validated_domain_version': 'validatedDomainVersion',
        'valid': 'valid',
        'risk_levels_valid': 'riskLevelsValid',
        'risk_calculation_mode': 'riskCalculationMode',
        'calculating_risks': 'calculatingRisks',
        'can_be_edited': 'canBeEdited',
        'can_be_shared': 'canBeShared',
        'risk': 'risk',
        'threats': 'threats',
        'control_strategies': 'controlStrategies',
        'compliance_threats': 'complianceThreats',
        'compliance_sets': 'complianceSets',
        'misbehaviour_sets': 'misbehaviourSets',
        'twas': 'twas',
        'control_sets': 'controlSets',
        'user_id': 'userId',
        'editor_id': 'editorId',
        'created': 'created',
        'modified': 'modified',
        'modified_by': 'modifiedBy',
        'levels': 'levels',
        'risk_vector': 'riskVector',
        'assets': 'assets',
        'relations': 'relations',
        'groups': 'groups',
        'loading_id': 'loadingId',
        'validating': 'validating'
    }

    def __init__(self, name=None, id=None, description=None, domain_graph=None, domain_version=None, validated_domain_version=None, valid=None, risk_levels_valid=None, risk_calculation_mode=None, calculating_risks=None, can_be_edited=None, can_be_shared=None, risk=None, threats=None, control_strategies=None, compliance_threats=None, compliance_sets=None, misbehaviour_sets=None, twas=None, control_sets=None, user_id=None, editor_id=None, created=None, modified=None, modified_by=None, levels=None, risk_vector=None, assets=None, relations=None, groups=None, loading_id=None, validating=None, local_vars_configuration=None):  # noqa: E501
        """ModelDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._id = None
        self._description = None
        self._domain_graph = None
        self._domain_version = None
        self._validated_domain_version = None
        self._valid = None
        self._risk_levels_valid = None
        self._risk_calculation_mode = None
        self._calculating_risks = None
        self._can_be_edited = None
        self._can_be_shared = None
        self._risk = None
        self._threats = None
        self._control_strategies = None
        self._compliance_threats = None
        self._compliance_sets = None
        self._misbehaviour_sets = None
        self._twas = None
        self._control_sets = None
        self._user_id = None
        self._editor_id = None
        self._created = None
        self._modified = None
        self._modified_by = None
        self._levels = None
        self._risk_vector = None
        self._assets = None
        self._relations = None
        self._groups = None
        self._loading_id = None
        self._validating = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if domain_graph is not None:
            self.domain_graph = domain_graph
        if domain_version is not None:
            self.domain_version = domain_version
        if validated_domain_version is not None:
            self.validated_domain_version = validated_domain_version
        if valid is not None:
            self.valid = valid
        if risk_levels_valid is not None:
            self.risk_levels_valid = risk_levels_valid
        if risk_calculation_mode is not None:
            self.risk_calculation_mode = risk_calculation_mode
        if calculating_risks is not None:
            self.calculating_risks = calculating_risks
        if can_be_edited is not None:
            self.can_be_edited = can_be_edited
        if can_be_shared is not None:
            self.can_be_shared = can_be_shared
        if risk is not None:
            self.risk = risk
        if threats is not None:
            self.threats = threats
        if control_strategies is not None:
            self.control_strategies = control_strategies
        if compliance_threats is not None:
            self.compliance_threats = compliance_threats
        if compliance_sets is not None:
            self.compliance_sets = compliance_sets
        if misbehaviour_sets is not None:
            self.misbehaviour_sets = misbehaviour_sets
        if twas is not None:
            self.twas = twas
        if control_sets is not None:
            self.control_sets = control_sets
        if user_id is not None:
            self.user_id = user_id
        if editor_id is not None:
            self.editor_id = editor_id
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if modified_by is not None:
            self.modified_by = modified_by
        if levels is not None:
            self.levels = levels
        if risk_vector is not None:
            self.risk_vector = risk_vector
        if assets is not None:
            self.assets = assets
        if relations is not None:
            self.relations = relations
        if groups is not None:
            self.groups = groups
        if loading_id is not None:
            self.loading_id = loading_id
        if validating is not None:
            self.validating = validating

    @property
    def name(self):
        """Gets the name of this ModelDTO.  # noqa: E501


        :return: The name of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelDTO.


        :param name: The name of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this ModelDTO.  # noqa: E501


        :return: The id of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelDTO.


        :param id: The id of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this ModelDTO.  # noqa: E501


        :return: The description of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelDTO.


        :param description: The description of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def domain_graph(self):
        """Gets the domain_graph of this ModelDTO.  # noqa: E501


        :return: The domain_graph of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._domain_graph

    @domain_graph.setter
    def domain_graph(self, domain_graph):
        """Sets the domain_graph of this ModelDTO.


        :param domain_graph: The domain_graph of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._domain_graph = domain_graph

    @property
    def domain_version(self):
        """Gets the domain_version of this ModelDTO.  # noqa: E501


        :return: The domain_version of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._domain_version

    @domain_version.setter
    def domain_version(self, domain_version):
        """Sets the domain_version of this ModelDTO.


        :param domain_version: The domain_version of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._domain_version = domain_version

    @property
    def validated_domain_version(self):
        """Gets the validated_domain_version of this ModelDTO.  # noqa: E501


        :return: The validated_domain_version of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._validated_domain_version

    @validated_domain_version.setter
    def validated_domain_version(self, validated_domain_version):
        """Sets the validated_domain_version of this ModelDTO.


        :param validated_domain_version: The validated_domain_version of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._validated_domain_version = validated_domain_version

    @property
    def valid(self):
        """Gets the valid of this ModelDTO.  # noqa: E501


        :return: The valid of this ModelDTO.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this ModelDTO.


        :param valid: The valid of this ModelDTO.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def risk_levels_valid(self):
        """Gets the risk_levels_valid of this ModelDTO.  # noqa: E501


        :return: The risk_levels_valid of this ModelDTO.  # noqa: E501
        :rtype: bool
        """
        return self._risk_levels_valid

    @risk_levels_valid.setter
    def risk_levels_valid(self, risk_levels_valid):
        """Sets the risk_levels_valid of this ModelDTO.


        :param risk_levels_valid: The risk_levels_valid of this ModelDTO.  # noqa: E501
        :type: bool
        """

        self._risk_levels_valid = risk_levels_valid

    @property
    def risk_calculation_mode(self):
        """Gets the risk_calculation_mode of this ModelDTO.  # noqa: E501


        :return: The risk_calculation_mode of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._risk_calculation_mode

    @risk_calculation_mode.setter
    def risk_calculation_mode(self, risk_calculation_mode):
        """Sets the risk_calculation_mode of this ModelDTO.


        :param risk_calculation_mode: The risk_calculation_mode of this ModelDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["CURRENT", "FUTURE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and risk_calculation_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `risk_calculation_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(risk_calculation_mode, allowed_values)
            )

        self._risk_calculation_mode = risk_calculation_mode

    @property
    def calculating_risks(self):
        """Gets the calculating_risks of this ModelDTO.  # noqa: E501


        :return: The calculating_risks of this ModelDTO.  # noqa: E501
        :rtype: bool
        """
        return self._calculating_risks

    @calculating_risks.setter
    def calculating_risks(self, calculating_risks):
        """Sets the calculating_risks of this ModelDTO.


        :param calculating_risks: The calculating_risks of this ModelDTO.  # noqa: E501
        :type: bool
        """

        self._calculating_risks = calculating_risks

    @property
    def can_be_edited(self):
        """Gets the can_be_edited of this ModelDTO.  # noqa: E501


        :return: The can_be_edited of this ModelDTO.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_edited

    @can_be_edited.setter
    def can_be_edited(self, can_be_edited):
        """Sets the can_be_edited of this ModelDTO.


        :param can_be_edited: The can_be_edited of this ModelDTO.  # noqa: E501
        :type: bool
        """

        self._can_be_edited = can_be_edited

    @property
    def can_be_shared(self):
        """Gets the can_be_shared of this ModelDTO.  # noqa: E501


        :return: The can_be_shared of this ModelDTO.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_shared

    @can_be_shared.setter
    def can_be_shared(self, can_be_shared):
        """Sets the can_be_shared of this ModelDTO.


        :param can_be_shared: The can_be_shared of this ModelDTO.  # noqa: E501
        :type: bool
        """

        self._can_be_shared = can_be_shared

    @property
    def risk(self):
        """Gets the risk of this ModelDTO.  # noqa: E501


        :return: The risk of this ModelDTO.  # noqa: E501
        :rtype: Level
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this ModelDTO.


        :param risk: The risk of this ModelDTO.  # noqa: E501
        :type: Level
        """

        self._risk = risk

    @property
    def threats(self):
        """Gets the threats of this ModelDTO.  # noqa: E501


        :return: The threats of this ModelDTO.  # noqa: E501
        :rtype: list[ThreatDTO]
        """
        return self._threats

    @threats.setter
    def threats(self, threats):
        """Sets the threats of this ModelDTO.


        :param threats: The threats of this ModelDTO.  # noqa: E501
        :type: list[ThreatDTO]
        """

        self._threats = threats

    @property
    def control_strategies(self):
        """Gets the control_strategies of this ModelDTO.  # noqa: E501


        :return: The control_strategies of this ModelDTO.  # noqa: E501
        :rtype: dict(str, ControlStrategyDTO)
        """
        return self._control_strategies

    @control_strategies.setter
    def control_strategies(self, control_strategies):
        """Sets the control_strategies of this ModelDTO.


        :param control_strategies: The control_strategies of this ModelDTO.  # noqa: E501
        :type: dict(str, ControlStrategyDTO)
        """

        self._control_strategies = control_strategies

    @property
    def compliance_threats(self):
        """Gets the compliance_threats of this ModelDTO.  # noqa: E501


        :return: The compliance_threats of this ModelDTO.  # noqa: E501
        :rtype: list[ComplianceThreatDTO]
        """
        return self._compliance_threats

    @compliance_threats.setter
    def compliance_threats(self, compliance_threats):
        """Sets the compliance_threats of this ModelDTO.


        :param compliance_threats: The compliance_threats of this ModelDTO.  # noqa: E501
        :type: list[ComplianceThreatDTO]
        """

        self._compliance_threats = compliance_threats

    @property
    def compliance_sets(self):
        """Gets the compliance_sets of this ModelDTO.  # noqa: E501


        :return: The compliance_sets of this ModelDTO.  # noqa: E501
        :rtype: list[ComplianceSetDTO]
        """
        return self._compliance_sets

    @compliance_sets.setter
    def compliance_sets(self, compliance_sets):
        """Sets the compliance_sets of this ModelDTO.


        :param compliance_sets: The compliance_sets of this ModelDTO.  # noqa: E501
        :type: list[ComplianceSetDTO]
        """

        self._compliance_sets = compliance_sets

    @property
    def misbehaviour_sets(self):
        """Gets the misbehaviour_sets of this ModelDTO.  # noqa: E501


        :return: The misbehaviour_sets of this ModelDTO.  # noqa: E501
        :rtype: dict(str, MisbehaviourSet)
        """
        return self._misbehaviour_sets

    @misbehaviour_sets.setter
    def misbehaviour_sets(self, misbehaviour_sets):
        """Sets the misbehaviour_sets of this ModelDTO.


        :param misbehaviour_sets: The misbehaviour_sets of this ModelDTO.  # noqa: E501
        :type: dict(str, MisbehaviourSet)
        """

        self._misbehaviour_sets = misbehaviour_sets

    @property
    def twas(self):
        """Gets the twas of this ModelDTO.  # noqa: E501


        :return: The twas of this ModelDTO.  # noqa: E501
        :rtype: dict(str, TrustworthinessAttributeSet)
        """
        return self._twas

    @twas.setter
    def twas(self, twas):
        """Sets the twas of this ModelDTO.


        :param twas: The twas of this ModelDTO.  # noqa: E501
        :type: dict(str, TrustworthinessAttributeSet)
        """

        self._twas = twas

    @property
    def control_sets(self):
        """Gets the control_sets of this ModelDTO.  # noqa: E501


        :return: The control_sets of this ModelDTO.  # noqa: E501
        :rtype: list[ControlSet]
        """
        return self._control_sets

    @control_sets.setter
    def control_sets(self, control_sets):
        """Sets the control_sets of this ModelDTO.


        :param control_sets: The control_sets of this ModelDTO.  # noqa: E501
        :type: list[ControlSet]
        """

        self._control_sets = control_sets

    @property
    def user_id(self):
        """Gets the user_id of this ModelDTO.  # noqa: E501


        :return: The user_id of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelDTO.


        :param user_id: The user_id of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def editor_id(self):
        """Gets the editor_id of this ModelDTO.  # noqa: E501


        :return: The editor_id of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._editor_id

    @editor_id.setter
    def editor_id(self, editor_id):
        """Sets the editor_id of this ModelDTO.


        :param editor_id: The editor_id of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._editor_id = editor_id

    @property
    def created(self):
        """Gets the created of this ModelDTO.  # noqa: E501


        :return: The created of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ModelDTO.


        :param created: The created of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this ModelDTO.  # noqa: E501


        :return: The modified of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ModelDTO.


        :param modified: The modified of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def modified_by(self):
        """Gets the modified_by of this ModelDTO.  # noqa: E501


        :return: The modified_by of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this ModelDTO.


        :param modified_by: The modified_by of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def levels(self):
        """Gets the levels of this ModelDTO.  # noqa: E501


        :return: The levels of this ModelDTO.  # noqa: E501
        :rtype: dict(str, list[Level])
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """Sets the levels of this ModelDTO.


        :param levels: The levels of this ModelDTO.  # noqa: E501
        :type: dict(str, list[Level])
        """

        self._levels = levels

    @property
    def risk_vector(self):
        """Gets the risk_vector of this ModelDTO.  # noqa: E501


        :return: The risk_vector of this ModelDTO.  # noqa: E501
        :rtype: dict(str, RiskLevelCount)
        """
        return self._risk_vector

    @risk_vector.setter
    def risk_vector(self, risk_vector):
        """Sets the risk_vector of this ModelDTO.


        :param risk_vector: The risk_vector of this ModelDTO.  # noqa: E501
        :type: dict(str, RiskLevelCount)
        """

        self._risk_vector = risk_vector

    @property
    def assets(self):
        """Gets the assets of this ModelDTO.  # noqa: E501


        :return: The assets of this ModelDTO.  # noqa: E501
        :rtype: list[AssetDTO]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this ModelDTO.


        :param assets: The assets of this ModelDTO.  # noqa: E501
        :type: list[AssetDTO]
        """

        self._assets = assets

    @property
    def relations(self):
        """Gets the relations of this ModelDTO.  # noqa: E501


        :return: The relations of this ModelDTO.  # noqa: E501
        :rtype: list[Relation]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this ModelDTO.


        :param relations: The relations of this ModelDTO.  # noqa: E501
        :type: list[Relation]
        """

        self._relations = relations

    @property
    def groups(self):
        """Gets the groups of this ModelDTO.  # noqa: E501


        :return: The groups of this ModelDTO.  # noqa: E501
        :rtype: list[AssetGroupDTO]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ModelDTO.


        :param groups: The groups of this ModelDTO.  # noqa: E501
        :type: list[AssetGroupDTO]
        """

        self._groups = groups

    @property
    def loading_id(self):
        """Gets the loading_id of this ModelDTO.  # noqa: E501


        :return: The loading_id of this ModelDTO.  # noqa: E501
        :rtype: str
        """
        return self._loading_id

    @loading_id.setter
    def loading_id(self, loading_id):
        """Sets the loading_id of this ModelDTO.


        :param loading_id: The loading_id of this ModelDTO.  # noqa: E501
        :type: str
        """

        self._loading_id = loading_id

    @property
    def validating(self):
        """Gets the validating of this ModelDTO.  # noqa: E501


        :return: The validating of this ModelDTO.  # noqa: E501
        :rtype: bool
        """
        return self._validating

    @validating.setter
    def validating(self, validating):
        """Sets the validating of this ModelDTO.


        :param validating: The validating of this ModelDTO.  # noqa: E501
        :type: bool
        """

        self._validating = validating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelDTO):
            return True

        return self.to_dict() != other.to_dict()
