# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.  # noqa: E501

    The version of the OpenAPI document: v3.4.0
    Contact: info@spyderisk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ssm_api_client.configuration import Configuration


class ModelDB(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uri': 'str',
        'type': 'str',
        'id': 'str',
        'label': 'str',
        'description': 'str',
        'risk': 'str',
        'risks_valid': 'bool',
        'risk_calculation_mode': 'str',
        'version_info': 'str',
        'domain_version': 'str',
        'created': 'str',
        'modified': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'type': 'type',
        'id': 'id',
        'label': 'label',
        'description': 'description',
        'risk': 'risk',
        'risks_valid': 'risksValid',
        'risk_calculation_mode': 'riskCalculationMode',
        'version_info': 'versionInfo',
        'domain_version': 'domainVersion',
        'created': 'created',
        'modified': 'modified'
    }

    def __init__(self, uri=None, type=None, id=None, label=None, description=None, risk=None, risks_valid=None, risk_calculation_mode=None, version_info=None, domain_version=None, created=None, modified=None, local_vars_configuration=None):  # noqa: E501
        """ModelDB - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uri = None
        self._type = None
        self._id = None
        self._label = None
        self._description = None
        self._risk = None
        self._risks_valid = None
        self._risk_calculation_mode = None
        self._version_info = None
        self._domain_version = None
        self._created = None
        self._modified = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if risk is not None:
            self.risk = risk
        if risks_valid is not None:
            self.risks_valid = risks_valid
        if risk_calculation_mode is not None:
            self.risk_calculation_mode = risk_calculation_mode
        if version_info is not None:
            self.version_info = version_info
        if domain_version is not None:
            self.domain_version = domain_version
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified

    @property
    def uri(self):
        """Gets the uri of this ModelDB.  # noqa: E501


        :return: The uri of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ModelDB.


        :param uri: The uri of this ModelDB.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def type(self):
        """Gets the type of this ModelDB.  # noqa: E501


        :return: The type of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelDB.


        :param type: The type of this ModelDB.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this ModelDB.  # noqa: E501


        :return: The id of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelDB.


        :param id: The id of this ModelDB.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this ModelDB.  # noqa: E501


        :return: The label of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ModelDB.


        :param label: The label of this ModelDB.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this ModelDB.  # noqa: E501


        :return: The description of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelDB.


        :param description: The description of this ModelDB.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def risk(self):
        """Gets the risk of this ModelDB.  # noqa: E501


        :return: The risk of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this ModelDB.


        :param risk: The risk of this ModelDB.  # noqa: E501
        :type: str
        """

        self._risk = risk

    @property
    def risks_valid(self):
        """Gets the risks_valid of this ModelDB.  # noqa: E501


        :return: The risks_valid of this ModelDB.  # noqa: E501
        :rtype: bool
        """
        return self._risks_valid

    @risks_valid.setter
    def risks_valid(self, risks_valid):
        """Sets the risks_valid of this ModelDB.


        :param risks_valid: The risks_valid of this ModelDB.  # noqa: E501
        :type: bool
        """

        self._risks_valid = risks_valid

    @property
    def risk_calculation_mode(self):
        """Gets the risk_calculation_mode of this ModelDB.  # noqa: E501


        :return: The risk_calculation_mode of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._risk_calculation_mode

    @risk_calculation_mode.setter
    def risk_calculation_mode(self, risk_calculation_mode):
        """Sets the risk_calculation_mode of this ModelDB.


        :param risk_calculation_mode: The risk_calculation_mode of this ModelDB.  # noqa: E501
        :type: str
        """

        self._risk_calculation_mode = risk_calculation_mode

    @property
    def version_info(self):
        """Gets the version_info of this ModelDB.  # noqa: E501


        :return: The version_info of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._version_info

    @version_info.setter
    def version_info(self, version_info):
        """Sets the version_info of this ModelDB.


        :param version_info: The version_info of this ModelDB.  # noqa: E501
        :type: str
        """

        self._version_info = version_info

    @property
    def domain_version(self):
        """Gets the domain_version of this ModelDB.  # noqa: E501


        :return: The domain_version of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._domain_version

    @domain_version.setter
    def domain_version(self, domain_version):
        """Sets the domain_version of this ModelDB.


        :param domain_version: The domain_version of this ModelDB.  # noqa: E501
        :type: str
        """

        self._domain_version = domain_version

    @property
    def created(self):
        """Gets the created of this ModelDB.  # noqa: E501


        :return: The created of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ModelDB.


        :param created: The created of this ModelDB.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this ModelDB.  # noqa: E501


        :return: The modified of this ModelDB.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ModelDB.


        :param modified: The modified of this ModelDB.  # noqa: E501
        :type: str
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelDB):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelDB):
            return True

        return self.to_dict() != other.to_dict()
